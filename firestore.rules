rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
   match /users/{user}/{document=**} {
      allow write: 	if authenticated() && request.resource.id == request.auth.uid;
      allow read: 	if true;
    }
    match /posts/{post}/{document=**} {
      allow create: if authenticated() && userExists() && verifyDate();
      allow update: if authenticated() && (isAuthor() && verifyDateEdited() || updateScoreOnly() && ratingMatchesContent('posts'));
      allow delete: if authenticated() && isAuthor();
      allow read: 	if true;
    }
    match /comments/{comment}/{document=**} {
      allow create: if authenticated() && userExists() && verifyDate();
      allow update: if authenticated() && ((isAuthor() && verifyDateEdited()) || request.resource.data.removed == true || updateScoreOnly() && ratingMatchesContent('comments'));
      allow delete: if authenticated() && (isAuthor() || !('user' in resource.data));
      allow read: 	if true;
    }
    match /ratings-posts/{rating}/{document=**} {
      allow create: if authenticated() && ratingIdsMatchContent('post');
      allow update: if authenticated() && isAuthor() && ratingIdsMatchContent('post');
      allow delete: if authenticated() && isAuthor();
      allow read: 	if authenticated();
    }
    match /ratings-comments/{rating}/{document=**} {
      allow create: if authenticated() && ratingIdsMatchContent('comment');
      allow update: if authenticated() && isAuthor() && ratingIdsMatchContent('comment');
      allow delete: if authenticated() && isAuthor();
      allow read: 	if authenticated();
    }
    match /spotify-auth/{user}/{document=**} {
      allow read, write: if authenticated();
    }

    function authenticated() {
    return request.auth != null;
    }
    function userExists() {
    return exists(userRef(request.auth.uid))
    }
    function isAuthor() {
    return resource.data['user'] == userRef(request.auth.uid)
    }
    function verifyDateEdited() {
    return request.resource.data.dateEdited == request.time;
    }
    function verifyDate() {
    return request.resource.data.date == request.time;
    }
    function updateScoreOnly() {
    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['score']);
    }
    function ratingIdsMatchContent(type) {
    return (userRef(request.resource.id.split('_')[0]) == request.resource.data['user']) && (/databases/$(database)/documents/$(type + "s")/$(request.resource.id.split('_')[1]) == request.resource.data[type]);
    }
    function ratingMatchesContent(type) {
    return
    (!exists(ratingRef(type)) && (
    getAfter(ratingRef(type)).data.positive == true
      && (request.resource.data.score == ('score' in resource.data ? resource.data.score + 1 : 1))
      || getAfter(ratingRef(type)).data.positive == false
      && (request.resource.data.score == ('score' in resource.data ? resource.data.score - 1 : -1))
    	)
    )
    || get(ratingRef(type)).data.positive == true
    && getAfter(ratingRef(type)).data.positive == false
    && (request.resource.data.score == resource.data.score - 2)
    || get(ratingRef(type)).data.positive == false
    && getAfter(ratingRef(type)).data.positive == true
    && (request.resource.data.score == resource.data.score + 2)
    || get(ratingRef(type)).data.positive == true
    && existsAfter(ratingRef(type)) == false
    && (request.resource.data.score == resource.data.score - 1)
    || get(ratingRef(type)).data.positive == false
    && existsAfter(ratingRef(type)) == false
    && (request.resource.data.score == resource.data.score + 1)
    }
    function userRef(id) {
    return /databases/$(database)/documents/users/$(id)
    }
    function ratingRef(type) {
    return /databases/$(database)/documents/$("ratings-" + type)/$(request.auth.uid + '_' + resource.id)
    }
  }
}
